--VHDL code:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity lcd is
Port ( clk,reset : in std_logic;
RS,EN,RW : out std_logic;
data : out std_logic_vector(7 downto 0));
end lcd;
architecture Behavioral of lcd is
type state_type is (s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,
s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23);
signal state:state_type;
SIGNAL count:std_logic_vector(22 downto 0);
SIGNAL clk1:std_logic;
begin
process(Clk,Reset)
begin
if(Clk' event AND Clk='1')then
count<=count+"0001";
end if;
clk1<=count(20);
end process;
RW<='0';
process(clk1, reset)
begin
if reset = '1' then
state <= s0;
elsif rising_edge(clk1) then
if state = s0 then
state <= s1;
RS<='0'; -- Write commonds to LCD.
EN <= '1';
data <= "00110000"; -- Function set for 8 bit interface, 1 line mode and
5x7 dot matrix.
end if;
if state = s1 then
state <= s2;
EN <= '0';
end if;
if state = s2 then
state <= s3;
EN <= '1';
data <= "00001111"; -- Display cursor and blinking ON.
end if;
if state = s3 then
state <= s4;
EN <= '0';
end if;
if state = s4 then
state <= s5;
EN <= '1';
data <= "00000001"; -- Clear display.
end if;
if state = s5 then
state <= s6;
EN <= '0';
end if;
if state = s6 then
state <= s7;
EN <= '1';
data <= "10000100"; -- Display address.
end if;
if state = s7 then
state <= s8;
EN <= '0';
end if;
if state = s8 then
RS <= '1'; -- Write data to LCD.
state <= s9;
EN <= '1';
data <= "00101010"; --(*)
end if;
if state = s9 then
state <= s10;
EN <= '0';
end if;
if state = s10 then
state <= s11;
EN <= '1';
data <= "01010011"; --S
end if;
if state = s11 then
state <= s12;
EN <= '0';
end if;
if state = s12 then
state <= s13;
EN <= '1';
data <= "01001011"; --K
end if;
if state = s13 then
state <= s14;
EN <= '0';
end if;
if state = s14 then
state <= s15;
EN <= '1';
data <= "01001110"; --N
end if;
if state = s15 then
state <= s16;
EN <= '0';
end if;
if state = s16 then
state <= s17;
EN <= '1';
data <= "01000011"; --C
end if;
if state = s17 then
state <= s18;
EN <= '0';
end if;
if state = s18 then
state <= s19;
EN <= '1';
data <= "01001111"; --O
end if;
if state = s19 then
state <= s20;
EN <= '0';
end if;
if state = s20 then
state <= s21;
EN <= '1';
data <= "01000101"; --E
end if;
if state = s21 then
state <= s22;
EN <= '0';
end if;
if state = s22 then
state <= s23;
EN <= '1';
data <= "00101010"; --(*)
end if;
if state = s23 then
EN <= '0';
end if;
end if;
end process;
end Behavioral;


--Testbench:
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY lcdtest IS
END lcdtest;
ARCHITECTURE behavior OF lcdtest IS
COMPONENT lcd
PORT(
clk1 : IN std_logic;
reset : IN std_logic;
RS : OUT std_logic;
EN : OUT std_logic;
RW : OUT std_logic;
data : OUT std_logic_vector(7 downto 0)
);
END COMPONENT;
--Inputs
signal clk1 : std_logic := '0';
signal reset : std_logic := '0';
--Outputs
signal RS : std_logic;
signal EN : std_logic;
signal RW : std_logic;
signal data : std_logic_vector(7 downto 0);
constant clk1_period : time := 10 ns;
BEGIN
uut: lcd PORT MAP (
clk1 => clk1,
reset => reset,
RS => RS,
EN => EN,
RW => RW,
data => data
);
clk1_process :process
begin
clk1 <= '0';
wait for clk1_period/2;
clk1 <= '1';
wait for clk1_period/2;
end process;
stim_proc: process
begin
reset<='0';
wait for clk1_period*10;
wait;
end process;
END;


--UCF:
NET data(0) LOC =P62;
NET data(1) LOC =P63;
NET data(2) LOC =P64;
NET data(3) LOC =P65;
NET data(4) LOC =P67;
NET data(5) LOC =P68;
NET data(6) LOC =P71;
NET data(7) LOC =P72;
NET Clk LOC =P183;
NET reset LOC =P102;
NET RS LOC =P57;
NET EN LOC =P61;
NET RW LOC =P58;
