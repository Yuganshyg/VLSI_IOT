ALU
VHDL code:
Library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;
use IEEE.STD_LOGIC_arith.ALL;
entity abc is
Port ( a : in STD_LOGIC_VECTOR (3 downto 0);
b : in STD_LOGIC_VECTOR (3 downto 0);
s : in STD_LOGIC_VECTOR (2 downto 0);
c : out STD_LOGIC_VECTOR (3 downto 0));
end abc;
architecture Behavioral of abc is
begin
process (a,b,s)
begin
case s is
when "000" => c <=a+ b;
when "001" => c <=a - b;
when "010" => c <= a and b;
when "011" => c <= a or b;
when "100" => c <= a nand b;
when "101" => c <= a nor b;
when "110" => c <= not a;
when "111" => c <= a;when others => null;
end case; end process; end Behavioral;

Testbench:
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY xyz IS
END xyz;
ARCHITECTURE behavior OF xyz IS
COMPONENT abc
PORT(
a : IN std_logic_vector(3 downto 0);
b : IN std_logic_vector(3 downto 0);
s : IN std_logic_vector(2 downto 0);
c : OUT std_logic_vector(3 downto 0));
END COMPONENT;
signal a : std_logic_vector(3 downto 0) := (others => '0');
signal b : std_logic_vector(3 downto 0) := (others => '0');
signal s : std_logic_vector(2 downto 0) := (others => '0');
signal c : std_logic_vector(3 downto 0);
BEGIN
uut: abc PORT MAP (
a => a,
b => b,
s => s,
c => c );
stim_proc: process
begin
wait for 100 ns; a<="1010"; b<="1001"; s<="000"; wait for 100 ns; a<="1010";
b<="1001"; s<="000"; wait for 100 ns; a<="1010"; b<="1001"; s<="001";
wait for 100 ns; a<="1010"; b<="1001"; s<="010"; wait for 100 ns; a<="1010";
b<="1001"; s<="101"; wait for 100 ns; a<="1010"; b<="1001"; s<="100";
wait for 100 ns; a<="1010"; b<="1001"; s<="101"; wait for 100 ns; a<="1010";
b<="1001"; s<="110"; wait for 100 ns;
a<="1010"; b<="1001"; s<="111";
wait for 100 ns; wait; end process; END;

UCF:
net a(3) loc=p96; net a(2) loc=p97;
net a(1) loc=p100; net a(0) loc=p101;
net b(3) loc=p90; net b(2) loc=p93;
net b(1) loc=p94; net b(0) loc=p95;
net s(2) loc=p85; net s(1) loc=p86;
net s(0) loc=p87; net c(3) loc=p167;
net c(2) loc=p166; net c(1) loc=p165;
net c(0) loc=p162;

 
Shift Register
--VHDL CODE
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY shiftreg IS
END shiftreg;
ARCHITECTURE behavior OF shiftreg IS
COMPONENT unishiftreg
PORT(
si : IN std_logic;
clk : IN std_logic;
so : OUT std_logic;
pin : IN std_logic_vector(3 downto 0);
po : OUT std_logic_vector(3 downto 0);
sel : IN std_logic_vector(1 downto 0)
);
END COMPONENT;
signal si : std_logic := '0';
signal clk : std_logic := '0';
signal pin : std_logic_vector(3 downto 0) := (others => '0');
signal sel : std_logic_vector(1 downto 0) := (others => '0');
signal so : std_logic;
signal po : std_logic_vector(3 downto 0);
constant clk_period : time := 10 ns;
BEGIN
uut: unishiftreg PORT MAP (
si => si,
clk => clk,
so => so,
pin => pin,
po => po,
sel => sel
);
clk_process :process
begin
clk <= '0';
wait for clk_period/2;
clk <= '1';
wait for clk_period/2;
end process;
stim_proc: process
begin
wait for 100 ns;
wait for clk_period*10;
end process;
END;

--TestBench:
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY tb IS
END tb;
ARCHITECTURE behavior OF tb IS
COMPONENT unishiftreg
PORT(
si : IN std_logic;
clk : IN std_logic;
so : OUT std_logic;
pin : IN std_logic_vector(3 downto 0);
po : OUT std_logic_vector(3 downto 0);
sel : IN std_logic_vector(1 downto 0)
);
END COMPONENT;
signal si : std_logic := '0';
signal clk : std_logic := '0';
signal pin : std_logic_vector(3 downto 0) := (others => '0');
signal sel : std_logic_vector(1 downto 0) := (others => '0');
signal so : std_logic;
signal po : std_logic_vector(3 downto 0);
constant clk_period : time := 10 ns;
BEGIN
uut: unishiftreg PORT MAP (
si => si,
clk => clk,
so => so,
pin => pin,
po => po,
sel => sel
);
clk_process :process
begin
clk <= '0';
wait for clk_period/2;
clk <= '1';
wait for clk_period/2;
end process;
stim_proc: process
begin
sel <= "00";
si <= '1';
wait for 100 ns;
sel <= "01";
si <= '1';
wait for 100 ns;
sel <= "10";
pin <= "1010";
wait for 100 ns;
wait;
end process;
END;

--UCF File:
NET "clk" LOC = P132;
NET "reset" LOC = P204;
NET "sl_in" LOC = P179;
NET "sr_in" LOC = P180;
NET "sel<0>" LOC = P165;
NET "sel<1>" LOC = P167;
NET "datain<0>" LOC = P192;
NET "datain<1>" LOC = P193;
NET "datain<2>" LOC = P189;
NET "datain<3>" LOC = P190;
NET "dataout<0>" LOC = P205;
NET "dataout<1>" LOC = P206;
NET "dataout<2>" LOC = P203;
NET "dataout<3>" LOC = P200;

 
Mod-n Counter
--Testbench:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;
entity modncount is
Port ( clk : in STD_LOGIC;
clr : in STD_LOGIC;
q : inout STD_LOGIC_VECTOR (2 downto 0));
end modncount;
architecture Behavioral of modncount is
signal count: std_logic_vector(2 downto 0);
begin
process(clk)
begin
if (clr='1') then count <= "000";
elsif (rising_edge (clk)) then
if (count="100")
then count <= "000";
else
count<=count+ 1;
end if;
end if;
end process;
q<=count;
end Behavioral;


--Testbench:
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY hhh IS
END hhh;
ARCHITECTURE behavior OF hhh IS
COMPONENT modncount
PORT(
clk : IN std_logic;
clr : IN std_logic;
q : INOUT std_logic_vector(2 downto 0)
);
END COMPONENT;
--Inputs
signal clk : std_logic := '0';
signal clr : std_logic := '0';
signal q : std_logic_vector(2 downto 0);
BEGIN
uut: modncount PORT MAP (
clk => clk,
clr => clr,
q => q
);
clk_process :process
begin
clk <= '0';
wait for 10 ns;
clk <= '1';
wait for 10 ns;
end process;
stim_proc: process
begin
clr<='1';
wait for 20 ns;
clr<='0';
wait for 20 ns;
wait;
end process;
END;


--UCF
Net clk loc=”p182”;
Net clr loc=”p102”;
Net q(2) loc=”p165”;
Net q(2) loc=”p166”;
Net q(2) loc=”p167”;

 
FIFO
--VHDL
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_unsigned.ALL;
use IEEE.STD_LOGIC_arith.ALL;
entity FIFO_4bit is
    Port ( clk,rst : in  STD_LOGIC;
           enr,enw : in  STD_LOGIC;
           datain : in  STD_LOGIC_VECTOR (3 downto 0);
           dataout : out  STD_LOGIC_VECTOR (3 downto 0);
           full,empty : out  STD_LOGIC);
end FIFO_4bit;
architecture Behavioral of FIFO_4bit is
type memory_type is array (0 to 7) of std_logic_vector(3 downto 0);
		signal memory : memory_type;
		signal readptr,writeptr : std_logic_vector(3 downto 0):="0000";  
cnt:std_logic_vector(24 downto 0);
begin
	FIFO_Process: process(clk)
		begin
		if(clk'event and clk='1' and enw ='1' and enr='0') then --WRITE OPERATION					memory(conv_integer(writeptr)) <= datain;
					writeptr <= writeptr + '1';  
		end if;
		if(clk'event and clk='1' and enr ='1' and enw='0') then  --READ OPERATION
					dataout <= memory(conv_integer(readptr));

					readptr <= readptr + '1';      
		end if;
		if(readptr = "1000") then     
				empty<='1';
		else
				empty<='0';
		end if;
		if(writeptr = "1000") then       
				full <='1';
		else
				full <='0';
		end if;
	end process;  
end Behavioral;

--Testbench
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY test1 IS
END test1;
ARCHITECTURE behavior OF test1 IS 
    COMPONENT FIFO_4bit
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         enr : IN  std_logic;
         enw : IN  std_logic;
         datain : IN  std_logic_vector(3 downto 0);
         dataout : OUT  std_logic_vector(3 downto 0);
         full : OUT  std_logic;
         empty : OUT  std_logic
        );
    END COMPONENT;
   signal clk : std_logic := '0';
   signal rst : std_logic := '0';
   signal enr : std_logic := '0';
   signal enw : std_logic := '0';
   signal datain : std_logic_vector(3 downto 0) := (others => '0');
   signal dataout : std_logic_vector(3 downto 0);
   signal full : std_logic;
   signal empty : std_logic;
   constant clk_period : time := 10 ns;
BEGIN
   uut: FIFO_4bit PORT MAP (
          clk => clk,
          rst => rst,
          enr => enr,
          enw => enw,
          datain => datain,
          dataout => dataout,
          full => full,
          empty => empty
        );
   clk_process :process
   begin
		clk <= '1';
		wait for clk_period/2;
		clk <= '0';
		wait for clk_period/2;
   end process;
   stim_proc: process
   begin
		enw<='1'; enr<='0';
		datain<="0001";wait for 10ns;
		datain<="0011";wait for 10ns;
		datain<="0111";wait for 10ns;
		datain<="1111";wait for 10ns;
		datain<="1110";wait for 10ns;	          
		datain<="1100";wait for 10ns;
		datain<="1000";wait for 10ns;
		datain<="0000";wait for 10ns;
		enw<='0'; enr<='1';
		wait for 80ns;
  end process;
END;

 
LCD
--VHDL code:
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity lcd is
Port ( clk,reset : in std_logic;
RS,EN,RW : out std_logic;
data : out std_logic_vector(7 downto 0));
end lcd;
architecture Behavioral of lcd is
type state_type is (s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,
s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23);
signal state:state_type;
SIGNAL count:std_logic_vector(22 downto 0);
SIGNAL clk1:std_logic;
begin
process(Clk,Reset)
begin
if(Clk' event AND Clk='1')then
count<=count+"0001"; end if;
clk1<=count(20); end process; RW<='0';
process(clk1, reset)
begin
if reset = '1' then
state <= s0;
elsif rising_edge(clk1) then
if state = s0 then
state <= s1; RS<='0'; EN <= '1';
data <= "00110000"; end if;
if state = s1 then
state <= s2; EN <= '0'; end if;
if state = s2 then
state <= s3; EN <= '1'; data <= "00001111"; 
end if;
if state = s3 then
state <= s4; EN <= '0'; end if;
if state = s4 then
state <= s5; EN <= '1';
data <= "00000001"; end if;
if state = s5 then
state <= s6;EN <= '0';end if;
if state = s6 then
state <= s7;EN <= '1';
data <= "10000100"; end if;
if state = s7 then
state <= s8;EN <= '0';end if;
if state = s8 then
RS <= '1'; state <= s9;EN <= '1';
data <= "00101010"; end if;
if state = s9 then
state <= s10;EN <= '0';end if;
if state = s10 then
state <= s11;EN <= '1';
data <= "01010011"; end if;
if state = s11 then
state <= s12;EN <= '0';end if;
if state = s12 then
state <= s13;EN <= '1';
data <= "01001011";end if;
if state = s13 then
state <= s14;EN <= '0';end if;
if state = s14 then
state <= s15;EN <= '1';
data <= "01001110"; end if;
if state = s15 then
state <= s16;EN <= '0';end if;
if state = s16 then
state <= s17;EN <= '1';
data <= "01000011";end if;
if state = s17 then
state <= s18;EN <= '0';end if;
if state = s18 then
state <= s19;EN <= '1';
data <= "01001111"; end if;
if state = s19 then
state <= s20;EN <= '0';end if;
if state = s20 then
state <= s21;EN <= '1';
data <= "01000101"; end if;
if state = s21 then
state <= s22;EN <= '0';end if;
if state = s22 then
state <= s23;EN <= '1';
data <= "00101010"; end if;
if state = s23 then
EN <= '0';end if;end if;
end process;end Behavioral;

--Testbench:
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY lcdtest IS
END lcdtest;
ARCHITECTURE behavior OF lcdtest IS
COMPONENT lcd
PORT(
clk1 : IN std_logic;
reset : IN std_logic;
RS : OUT std_logic;
EN : OUT std_logic;
RW : OUT std_logic;
data : OUT std_logic_vector(7 downto 0)
);
END COMPONENT;
--Inputs
signal clk1 : std_logic := '0';
signal reset : std_logic := '0';
--Outputs
signal RS : std_logic;
signal EN : std_logic;
signal RW : std_logic;
signal data : std_logic_vector(7 downto 0);
constant clk1_period : time := 10 ns;
BEGIN
uut: lcd PORT MAP (
clk1 => clk1,
reset => reset,
RS => RS,
EN => EN,
RW => RW,
data => data
);
clk1_process :process
begin
clk1 <= '0';
wait for clk1_period/2;
clk1 <= '1';
wait for clk1_period/2;
end process;
stim_proc: process
begin
reset<='0';
wait for clk1_period*10;
wait;
end process;
END;

--UCF:
NET data(0) LOC =P62;
NET data(1) LOC =P63;
NET data(2) LOC =P64;
NET data(3) LOC =P65;
NET data(4) LOC =P67;
NET data(5) LOC =P68;
NET data(6) LOC =P71;
NET data(7) LOC =P72;
NET Clk LOC =P183;
NET reset LOC =P102;
NET RS LOC =P57;
NET EN LOC =P61;
NET RW LOC =P58;